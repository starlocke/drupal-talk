<?php
// $Id$

/**
 * @file
 * Comments are displayed in a separate 'talk' tab, for node types you wish
 */

/**
 * Implementation of hook_help().
 */
function talk_help($path, $arg) {
  switch ($path) {
    case 'admin/help#talk':
      $output = '<p>'. t('The talk module gives you the option to display comments on a seperate tab. The option is per content type and can be set in the workflow options of a content type.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_menu().
 */
function talk_menu() {
  $items = array();
  $items['node/%node/talk'] = array(
    'title callback' => 'talk_title',
    'page callback' => 'talk_handle',
    'page arguments' => array(1),
    'access callback' => '_talk_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/settings/talk'] = array(
    'title' => t('Talk page'),
    'description' => t('Configure settings for the talk page.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('talk_admin_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Helper item for talk_menu: access callback.
 */
function _talk_access($node) {
  return ($node->nid && _talk_node_comment_value($node) && talk_activated($node->type) && user_access('access comments') && node_access('view', $node) && $node->comment_count);
}

/**
 * Menu call back for admin form.
 */
function talk_admin_form() {
  $form = array();
  $form['talk_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title of the "talk" page'),
    '#default_value' => talk_title(),
  );
  return system_settings_form($form);
}

function talk_title() {
  return variable_get('talk_title', t('Talk'));
}

/**
 * Menu callback for talk page.
 */
function talk_handle($node) {
  drupal_set_title(t('@title page for @node', array('@title' => talk_title(), '@node' => $node->title)));
  $add_comments = _talk_node_comment_value($node) == COMMENT_NODE_READ_WRITE && user_access('post comments');
  return theme('talkpage', $node, $add_comments);
}

/**
 * Implementation of hook_nodeapi().
 */
function talk_nodeapi(&$node, $op) {
  switch ($op) {
    case 'load':
      if (talk_activated($node->type) && arg(0) == 'node' && !arg(2)) {
        // Overwrite setting of comment module and set comments for this node to disabled.
        // This prevents the comments of being displayed.
        $output['comment_original_value'] = $node->comment;
        $output['comment'] = 0;
        return $output;
      }
      break;
  }
}

/**
 * Implementation of hook_link().
 */
function talk_link($type, $node = NULL, $teaser = FALSE) {
  if ($type == 'node' && talk_activated($node->type) && user_access('access comments') && _talk_node_comment_value($node)) {
    $result = array();

    // If there are comments, display "Talk page (X comments)" link to talk page.
    if ($node->comment_count) {
      $result['talk_comments'] = array(
        'title' => t('@title page (@nr comments)', array('@nr' => $node->comment_count, '@title' => talk_title())),
        'href' => 'node/'. $node->nid .'/talk',
        'attributes' => array(
          'title' => t('Jump to the first comment of this posting.'),
        ),
      );
    }
    // If no comments exist, add the "Add new comment" link.
    elseif (_talk_node_comment_value($node) == COMMENT_NODE_READ_WRITE) {
      if (user_access('post comments')) {
        $result['talk_add'] = array(
          'title' => t('Add new comment'),
          'fragment' => 'comment-form',
        );
        if (variable_get('comment_form_location_'. $node->type, COMMENT_FORM_SEPARATE_PAGE) == COMMENT_FORM_SEPARATE_PAGE) {
          $result['talk_add']['href'] = 'comment/reply/'. $node->nid;
        }
        else {
          $result['talk_add']['href'] = 'node/'. $node->nid .'/talk';
        }
      }
      else {
        $result['talk_forbidden']['title'] = theme('comment_post_forbidden', $node);
        $result['talk_forbidden']['html'] = TRUE;
      }
    }

    return $result;
  }
}

/**
 * Implementation of hook_link_alter().
 */
function talk_link_alter(&$links, $node) {
  // Removes all "Add a comment" links from the comment form page.
  if (arg(0) == 'comment' && arg(1) == 'reply') {
    unset($links['comment_add']);
    unset($links['talk_add']);
  }
}

/**
 * Implementation of hook_form_alter().
 */
function talk_form_alter(&$form, $form_state, $form_id) {
  // Add option to comment options of node types.
  if ($form_id == 'node_type_form' && isset($form['identity']['type']) && module_exists('comment')) {
    $form['comment']['comment_talk'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display comments on separate talk page'),
      '#prefix' => '<strong>'. t('Talk pages:') .'</strong>',
      '#weight' => 5,
      '#default_value' => talk_activated($form['#node_type']->type),
    );
  }
}

/**
 * Implementation of hook_comment().
 * Changing the destination to the talk page after posting a comment.
 */
function talk_comment($a1, $op) {
  if ($op == 'insert' || $op == 'update') {
    $nid = $a1['nid'];
    $node = node_load($nid);
    if (talk_activated($node->type)) {
      $_REQUEST['destination'] = 'node/'. $a1['nid'] .'/talk';
    }
  }
}

/**
 * Is talk page option activated for node tpye?
 */
function talk_activated($node_type) {
  return variable_get('comment_talk_'. $node_type, FALSE);
}

/**
 * Value of 'comment' of node.
 */
function _talk_node_comment_value(&$node) {
  return isset($node->comment_original_value) ? $node->comment_original_value : $node->comment;
}

/**
 * Implementation of hook_theme().
 */
function talk_theme() {
  return array(
    'talkpage' => array(
      'template' => 'talkpage',
      'arguments' => array('node' => NULL, 'add_comments' => NULL),
    ),
  );
}

/**
 * Template preprocess function.
 *
 * @param $node
 *   The node whose talk page is being displayed.
 * @param $add_comments
 *   Boolean that indicates if adding comments is allowed for current user.
 * @ingroup themeable
 */
function template_preprocess_talkpage(&$variables) {
  $add_comments = $variables['add_comments'];
  $node = $variables['node'];
  $variables['title'] = talk_title();
  $comment_link = '';
  $redisplay = FALSE;

  if ($add_comments) {
    if (variable_get('comment_form_location_'. $node->type, COMMENT_FORM_SEPARATE_PAGE) == COMMENT_FORM_SEPARATE_PAGE) {
      $comment_link = l(t('Add new comment'), 'comment/reply/'. $node->nid, array('fragment' => 'comment-form'));
    }
    elseif ($node->comment_count > 1) {
      $comment_link = l(t('Add new comment'), check_plain($_GET['q']), array('fragment' => 'comment-form'));
      $redisplay = TRUE;
    }
  }

  $comments = comment_render($node, 0);

  $variables['redisplay'] = $redisplay;
  $variables['comment_link'] = $comment_link;
  $variables['comments'] = $comments;
}

/**
 * Implementation of hook_token_list(). Documents the individual
 * tokens handled by the module.
 */
function talk_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'comment' || $type == 'all') {
    $tokens['comment']['comment-talk-url'] = t('The comment view url (Talk compatible).');
  }
  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function talk_token_values($type, $object = NULL, $options = array()) {
  switch ($type) {
    case 'comment':
      if ($comment = (object)$object) {
        $talk = '';
        $node = node_load($comment->nid);
        if (talk_activated($node->type)) {
          $talk = '/talk';
        }
        $values['comment-talk-url'] = url('node/'. $comment->nid . $talk, array('fragment' => 'comment-'. $comment->cid, 'absolute' => TRUE));
        return $values;
      }
      break;
  }
}

